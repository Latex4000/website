---
import { defaultDarkTheme, defaultTheme, themes } from "./config";
import { valuesToString } from "./themeClient";

const initJson = JSON.stringify({ defaultDarkTheme, defaultTheme, themes });
const noScript = `
        :root { ${valuesToString(defaultTheme.values)} }

        @media (prefers-color-scheme: dark) {
            :root { ${valuesToString(defaultDarkTheme.values)} }
        }
    `;
---

{/* Initial default theme styles for noscript */}
<style is:inline set:html={noScript} data-theme></style>
{
    // Assumes defaultDarkTheme has the same cssUrls
    defaultTheme.cssUrls.map((cssUrl) => (
        <link data-theme href={cssUrl} rel="stylesheet" />
    ))
}

{/* Set up theme styles for normal client */}
<script is:inline set:html={initJson} data-theme-init type="application/json" />
<script>
    (function () {
        const initElement = document.querySelector("script[data-theme-init]");

        if (!initElement || !initElement.textContent) {
            return;
        }

        let payload;
        try {
            payload = JSON.parse(initElement.textContent);
        } catch (error) {
            void error;
            return;
        }

        const { defaultDarkTheme, defaultTheme, themes } = payload;

        let storedSlug = null;
        try {
            storedSlug = window.localStorage.getItem("theme-slug");
        } catch (error) {
            void error;
            storedSlug = null;
        }

        const themeExists = (slug: string) =>
            themes.some(
                (candidate: { slug: string }) =>
                    candidate && candidate.slug === slug
            );

        const preferredSlug = (() => {
            if (storedSlug != null && themeExists(storedSlug)) {
                return storedSlug;
            }

            return window.matchMedia("(prefers-color-scheme: dark)").matches
                ? defaultDarkTheme.slug
                : defaultTheme.slug;
        })();

        const theme =
            themes.find(
                (candidate: { slug: string }) =>
                    candidate && candidate.slug === preferredSlug
            ) ?? defaultTheme;

        const head = document.head;
        if (!head) {
            return;
        }

        head.querySelectorAll("[data-theme]").forEach((element) =>
            element.remove()
        );

        const valuesToString = (values: Record<string, string>) =>
            Object.entries(values)
                .map(function ([key, value]) {
                    return key + ": " + value + ";";
                })
                .join("");

        const styleElement = document.createElement("style");
        styleElement.dataset.theme = "";
        styleElement.textContent =
            ":root { " + valuesToString(theme.values) + " }";
        head.appendChild(styleElement);

        for (const cssUrl of theme.cssUrls) {
            const linkElement = document.createElement("link");
            linkElement.dataset.theme = "";
            linkElement.rel = "stylesheet";
            linkElement.href = String(cssUrl);
            head.appendChild(linkElement);
        }

        const styleSource = document.getElementById(
            "style-source"
        ) as HTMLAnchorElement | null;
        if (styleSource) {
            styleSource.href = theme.values["--srclink"];
            styleSource.textContent = theme.values["--srctext"];
        }

        const applyBodyDataset = function () {
            if (document.body) {
                document.body.dataset.theme = theme.slug;
            }
        };

        if (document.readyState === "loading") {
            document.addEventListener("DOMContentLoaded", applyBodyDataset, {
                once: true,
            });
        } else {
            applyBodyDataset();
        }

        window.__initialThemeSlug = theme.slug;

        try {
            window.localStorage.setItem("theme-slug", theme.slug);
        } catch (error) {
            void error;
            // Ignore storage errors
        }

        window.localStorage.removeItem("nottheme-color-scheme");
        window.localStorage.removeItem("nottheme-style");
        window.localStorage.removeItem("nottheme-themes");
    })();
</script>
