---
import indexCssUrl from "./index.css?url";
import { defaultDarkTheme, defaultTheme, ssrStyle, themes } from "./themes";

const initJson = JSON.stringify({ defaultDarkTheme, defaultTheme, themes });
---

{/* Global styles for all themes */}
<link href={indexCssUrl} rel="stylesheet" />

{/* Initial default theme styles for noscript */}
<style is:inline set:html={ssrStyle()} data-theme></style>
{
    // Assumes defaultDarkTheme has the same cssUrls
    defaultTheme.cssUrls.map((cssUrl) => (
        <link data-theme href={cssUrl} rel="stylesheet" />
    ))
}

{/* Set up theme styles for normal client */}
<script is:inline set:html={initJson} data-theme-init type="application/json" />
<script>
    // This script needs to run before initial render so that the default theme
    // doesn't flash into view before switching to the user's preference from
    // localStorage. The only not-super-hack way to do this is to inline the JS
    // in the <head> of Layout, and Astro will let us do that only if the
    // script is not a module. So no imports allowed, and data is passed in via
    // the DOM

    import type { Theme } from "./createThemes";

    const { defaultDarkTheme, defaultTheme, themes } = JSON.parse(
        document.querySelector("script[data-theme-init]")?.textContent!,
    ) as {
        defaultDarkTheme: Theme;
        defaultTheme: Theme;
        themes: Theme[];
    };

    function valuesToString(values: Record<`--${string}`, string>): string {
        return Object.entries(values)
            .map(([key, value]) => `${key}: ${value};`)
            .join("");
    }

    function getInitialTheme(): string {
        const themeSlug = window.localStorage.getItem("theme-slug");

        if (
            themeSlug != null &&
            themes.some(({ slug }) => slug === themeSlug)
        ) {
            return themeSlug;
        }

        return window.matchMedia("(prefers-color-scheme: dark)").matches
            ? defaultDarkTheme.slug
            : defaultTheme.slug;
    }

    function applyTheme(themeSlug: string): void {
        const theme = themes.find(({ slug }) => slug === themeSlug);

        if (theme == null) {
            return;
        }

        // Query previous theme elements in <head>
        const prevHeadChildren = document.head.querySelectorAll("[data-theme]");

        // Create new theme elements
        const newHeadChildren: HTMLElement[] = [];

        const styleElement = document.createElement("style");
        styleElement.dataset.theme = "";
        styleElement.textContent = `:root { ${valuesToString(theme.values)} }`;
        newHeadChildren.push(styleElement);

        for (const cssUrl of theme.cssUrls) {
            const linkElement = document.createElement("link");
            linkElement.dataset.theme = "";
            linkElement.href = cssUrl;
            linkElement.rel = "stylesheet";
            newHeadChildren.push(linkElement);
        }

        // Remove previous theme elements
        prevHeadChildren.forEach((element) => element.remove());

        // Add new theme elements
        newHeadChildren.forEach((element) =>
            document.head.appendChild(element),
        );

        // Write theme slug to <body> dataset
        document.body.dataset.theme = theme.slug;

        // Set new style source link and text
        const styleSource = document.getElementById(
            "style-source",
        ) as HTMLAnchorElement;
        styleSource.href = theme.values["--srclink"];
        styleSource.textContent = theme.values["--srctext"];
    }

    applyTheme(getInitialTheme());

    // Remove old unused storage
    window.localStorage.removeItem("nottheme-color-scheme");
    window.localStorage.removeItem("nottheme-style");
    window.localStorage.removeItem("nottheme-themes");
</script>
