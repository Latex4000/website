---
import { db } from "astro:db";
import Layout from "../../layouts/Layout.astro";
import { Word } from "astro:db";
import { eq } from "astro:db";
import { readFile } from "fs/promises";
import { Member } from "astro:db";
import { wordFromDb } from "../../../db/config";

export const prerender = false;

if (process.env.WORDS_UPLOAD_DIRECTORY == null) {
	// todo ..?
	Astro.response.status = 500;
	return jsonError("Env not set", 500);
}

const timestamp = Number.parseInt(Astro.params.timestamp!, 10);
const wordResult = await db
	.select({
		word: Word,
		memberColour: Member.colour,
	})
	.from(Word)
	.innerJoin(Member, eq(Word.memberDiscord, Member.discord))
	.where(eq(Word.date, new Date(timestamp)))
	.get();

if (wordResult == null) {
	// todo ..?
	Astro.response.status = 404;
	return;
}

const word = wordFromDb(wordResult.word);
const memberColour = wordResult.memberColour;

const wordHtml = await readFile(
	`${process.env.WORDS_UPLOAD_DIRECTORY}/${timestamp}/words.html`,
	"utf8",
);
---

<Layout title={word.title}>
	<small>{word.date.toLocaleString()}</small>
	<Fragment set:html={wordHtml} />
	<p style={{ color: memberColour }}>-L</p>
	<div class="tags">
		{word.tags.map((tag) => <small>{tag}</small>)}
	</div>
</Layout>

<style>
	.tags {
		display: flex;
		gap: var(--line-height);
		margin: var(--line-height) 0;
	}
</style>
