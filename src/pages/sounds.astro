---
import { desc, eq, getTableColumns } from "drizzle-orm";
import Layout from "../layouts/Layout.astro";
import AudioPlayer from "../components/Sounds/AudioPlayer";
import db from "../database/db";
import { Member, Sound } from "../database/schema";
import { thingColourHandler } from "../server/thingUtils";

export const prerender = false;

const sounds = await db
    .select({
        ...getTableColumns(Sound),
        memberColor: Member.color,
    })
    .from(Sound)
    .where(eq(Sound.deleted, false))
    .innerJoin(Member, eq(Sound.memberDiscord, Member.discord))
    .orderBy(desc(Sound.id))
    .then(thingColourHandler);
---

<Layout
    header="Sounds"
    title="Sounds"
    description="Sounds created by the LaTeX 4000 Collective"
>
    A lot of us in the group make music. We got about {sounds.length} sounds that
    we have released under the collective's name instead of our own:
    <div class="sounds">
        {
            sounds.map((sound) => (
                <div class="sound">
                    <img
                        alt=""
                        src={`/sounds-uploads/${sound.id}/cover.${sound.coverType}`}
                        style={{
                            border: sound.memberColor
                                ? `var(--border-thickness) solid ${sound.memberColor}`
                                : "none",
                        }}
                    />
                    <div class="details">
                        <h2>{sound.title}</h2>
                        {/* prettier-ignore */}
                        <div>
                            {sound.youtubeUrl != null && (
                                <>
                                    <a href={sound.youtubeUrl}>{/* prettier-ignore */}<span class="y">You</span><span class="t">Tube</span></a>
                                    |
                                </>
                            )}
                            {sound.soundcloudUrl != null && (
                                <>
                                    <a href={sound.soundcloudUrl}>{/* prettier-ignore */}<span class="s">Sound</span><span class="c">Cloud</span></a>
                                    |
                                </>
                            )}
                            <span>{sound.date.toLocaleString()}</span>
                        </div>
                        <AudioPlayer
                            client:only="react"
                            src={`/sounds-uploads/${sound.id}/track.${sound.trackType}`}
                            title={sound.title}
                            trackType={sound.trackType}
                        />
                        <div class="tags">
                            {sound.tags.map((tag) => (
                                <span>{tag}</span>
                            ))}
                        </div>
                    </div>
                </div>
            ))
        }
    </div>
</Layout>

<style>
    .sounds {
        margin: 1lh 0;
        display: flex;
        flex-direction: column;
        gap: 1lh;
    }

    .sound {
        display: flex;
        gap: 2ch;
        flex: 0 0 11lh;
        flex: 0 0 round(11lh, 1ch);
    }

    img {
        width: 11lh;
        height: 11lh;
        flex: none;
        object-fit: cover;

        @media (max-width: 800px) {
            width: 8lh;
            height: 8lh;
        }

        @media (max-width: 600px) {
            width: 5lh;
            height: 5lh;
        }

        @media (max-width: 400px) {
            width: 3lh;
            height: 3lh;
        }
    }

    .details {
        display: flex;
        flex-direction: column;
        gap: 1lh;
        flex-grow: 1;
        min-width: 0;
    }

    h2 {
        height: 2lh;
        margin: 0;
        text-transform: none;
    }

    .tags {
        display: flex;
        gap: 2ch;
        overflow-x: auto;
        margin-top: auto;
    }

    .tags > span {
        border: var(--border-thickness) solid var(--text-color);
        padding: calc(0.5lh - var(--border-thickness))
            calc(2ch - var(--border-thickness));
        text-wrap: nowrap;
    }

    .y {
        color: var(--text-color-alt);
    }

    .t {
        color: rgb(255, 0, 0);
    }

    .s {
        color: rgb(255, 85, 0);
    }

    .c {
        color: rgb(255, 115, 0);
    }
</style>
