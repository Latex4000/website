---
import { readdir } from "node:fs/promises";
import { desc, eq, getTableColumns } from "drizzle-orm";
import db from "../database/db";
import { Member, Sight } from "../database/schema";
import Layout from "../layouts/Layout.astro";

export const prerender = false;

if (!process.env.SIGHTS_UPLOAD_DIRECTORY) {
    return new Response("SIGHTS_UPLOAD_DIRECTORY not set", { status: 500 });
}

const sights = await db
    .select({
        ...getTableColumns(Sight),
        memberColor: Member.color,
    })
    .from(Sight)
    .innerJoin(Member, eq(Sight.memberDiscord, Member.discord))
    .where(eq(Sight.deleted, false))
    .orderBy(desc(Sight.id));

const filenames = await readdir(process.env.SIGHTS_UPLOAD_DIRECTORY, {
    recursive: true,
});
const thumbFilenamesById: Record<number, string[]> = {};
const fullFilenamesById: Record<number, string[]> = {};

for (const path of filenames) {
    const parts = path.split("/");

    if (parts.length !== 3) {
        continue;
    }

    const sightId = Number(parts[0]!);
    const type = parts[1]!;
    const filename = parts[2]!;

    switch (type) {
        case "original":
            fullFilenamesById[sightId] ??= [];
            fullFilenamesById[sightId].push(filename);
            break;
        case "thumbs":
            thumbFilenamesById[sightId] ??= [];
            thumbFilenamesById[sightId].push(filename);
            break;
    }
}
---

<Layout
    header="Sights"
    title="Sights"
    description="Sights created by the Latex 4000 Collective"
>
    <p>Welcome to my web sight we got {sights.length} sights</p>
    <noscript>
        <p>JavaScript is required to view the full-size images</p>
    </noscript>
    {
        sights.length > 0 ? (
            <div class="sights-grid">
                {sights.map((sight) => (
                    <div
                        class="sight"
                        data-sight-id={sight.id}
                        data-sight-title={sight.title}
                        data-sight-desc={sight.description}
                        data-sight-tags={sight.tags}
                        data-sight-date={sight.date}
                        data-sight-pixelated={sight.pixelated}
                        data-sight-color={
                            sight.showColour ? sight.memberColor : ""
                        }
                    >
                        <div
                            class={`sight__images sight__images--${Math.min(3, thumbFilenamesById[sight.id]?.length ?? 0)} sight__images--quality-high`}
                        >
                            {thumbFilenamesById[sight.id]
                                ?.slice(0, 3)
                                .map((filename) => (
                                    <img
                                        alt=""
                                        class:list={[
                                            sight.pixelated && "pixelated",
                                        ]}
                                        src={`/sights-uploads/${sight.id}/thumbs/${filename}`}
                                        title={sight.description}
                                    />
                                ))}
                        </div>
                        <div
                            class={`sight__images sight__images--${Math.min(3, thumbFilenamesById[sight.id]?.length ?? 0)} sight__images--quality-low`}
                        >
                            {thumbFilenamesById[sight.id]
                                ?.slice(0, 3)
                                .map((filename) => (
                                    <img
                                        alt=""
                                        class:list={[
                                            sight.pixelated && "pixelated",
                                        ]}
                                        src={`/sights-uploads/${sight.id}/thumbs-evil/${filename}`}
                                        title={sight.description}
                                    />
                                ))}
                        </div>
                        <h3>{sight.title}</h3>
                        <div
                            class="sight__date"
                            style={{
                                color: sight.showColour
                                    ? sight.memberColor
                                    : undefined,
                            }}
                        >
                            {sight.date.toLocaleString()}
                        </div>
                    </div>
                ))}
            </div>
        ) : (
            <p>No sights currently</p>
        )
    }

    {/* Overlay for fullâ€“size images */}
    <div
        id="overlay"
        class="overlay hidden"
        data-full-filenames={JSON.stringify(fullFilenamesById)}
    >
        <div class="overlay-content">
            <button id="overlay-close">Close</button>
            <div class="overlay-header">
                {
                    /* eslint-disable-next-line astro/jsx-a11y/heading-has-content */
                }<h3 id="overlay-title"></h3>
                <p id="overlay-desc"></p>
                <div id="overlay-tags"></div>
                <div id="overlay-date"></div>
            </div>
            <div id="overlay-images" class="overlay-images"></div>
        </div>
    </div>
</Layout>

<style is:global>
    body:is(.themes-latex-light, .themes-latex-dark) .sights-grid {
        margin-top: 1rem;
    }

    body:is(.themes-mono-light, .themes-mono-dark)
        .sight__images--quality-high {
        display: none;
    }

    body:not(.themes-mono-light, .themes-mono-dark)
        .sight__images--quality-low {
        display: none;
    }
</style>

<style>
    .sights-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2lh 2ch;
    }

    @media (min-width: 600px) {
        .sights-grid {
            grid-template-columns: 1fr 1fr;
        }
    }

    .sight {
        cursor: pointer;
    }

    .sight__images {
        aspect-ratio: 4 / 3;
        position: relative;
    }

    .sight__images img {
        aspect-ratio: 4 / 3;
        display: block;
        object-fit: cover;
        position: absolute;
        width: 100%;
    }

    .sight__images--1 img {
        object-fit: contain;
    }

    .sight__images--2 img {
        width: calc(100% - 2ch);
    }

    .sight__images--3 img {
        width: calc(100% - 4ch);
    }

    .sight__images img:nth-child(1) {
        top: 0;
        left: 0;
    }

    .sight__images img:nth-child(2) {
        top: calc(2ch * 3 / 4);
        left: 2ch;
    }

    .sight__images img:nth-child(3) {
        top: calc(4ch * 3 / 4);
        left: 4ch;
    }

    .sight h3 {
        margin: 1lh 0 0 0;
        text-align: center;
    }

    .sight__date {
        color: var(--text-color-alt);
        text-align: center;
    }

    .pixelated {
        image-rendering: pixelated;
    }

    /* Overlay Styles */
    .overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.8);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .overlay.hidden {
        display: none;
    }

    .overlay-content {
        background: var(--background-color);
        padding: 1rem;
        max-height: 90vh;
        max-width: 90vw;
        overflow-y: auto;
        position: relative;
    }

    .overlay-header {
        margin-bottom: 1rem;
    }

    #overlay-close {
        position: absolute;
        top: 0.5rem;
        right: 0.5rem;
    }

    #overlay-tags {
        display: flex;
        gap: 2ch;
        overflow-x: auto;
        margin-top: auto;
    }

    #overlay-tags > span {
        border: var(--border-thickness) solid var(--text-color);
        padding: calc(0.5lh - var(--border-thickness))
            calc(2ch - var(--border-thickness));
        text-wrap: nowrap;
    }

    .overlay-images img {
        display: block;
        width: 100%;
        margin-bottom: 1rem;
    }
</style>

<script>
    const fullFilenamesById: Record<number, string[]> = JSON.parse(
        document
            .getElementById("overlay")
            ?.getAttribute("data-full-filenames") ?? "{}",
    );

    document.querySelectorAll(".sight").forEach((sightElem) => {
        sightElem.addEventListener("click", () => {
            const sightId = Number(sightElem.getAttribute("data-sight-id"));
            if (!fullFilenamesById[sightId]) return;

            const title = sightElem.getAttribute("data-sight-title");
            const desc = sightElem.getAttribute("data-sight-desc");
            const tags = sightElem.getAttribute("data-sight-tags")?.split(",");
            const date = sightElem.getAttribute("data-sight-date");

            const pixelated =
                sightElem.getAttribute("data-sight-pixelated") === "true";
            const color = sightElem.getAttribute("data-sight-color");

            const titleElem = document.getElementById("overlay-title")!;
            const descElem = document.getElementById("overlay-desc")!;
            const tagsElem = document.getElementById("overlay-tags")!;
            const dateElem = document.getElementById("overlay-date")!;
            titleElem.innerText = title || "";
            descElem.innerText = desc || "";
            tagsElem.innerHTML =
                tags
                    ?.map((tag) => `<span class="${tag}">${tag}</span>`)
                    .join("") || "";
            if (date) dateElem.innerText = new Date(date).toLocaleString();

            titleElem.style.color = color || "";
            descElem.style.color = color || "";
            tagsElem.style.color = color || "";
            dateElem.style.color = color || "";

            const imagesContainer = document.getElementById("overlay-images")!;
            imagesContainer.innerHTML = "";
            if (fullFilenamesById[sightId]) {
                fullFilenamesById[sightId].forEach((filename) => {
                    const img = document.createElement("img");
                    if (pixelated) img.classList.add("pixelated");
                    img.src = `/sights-uploads/${sightId}/original/${filename}`;
                    imagesContainer.appendChild(img);
                });
            }
            document.getElementById("overlay")?.classList.remove("hidden");
        });
    });

    document.getElementById("overlay-close")?.addEventListener("click", () => {
        document.getElementById("overlay")?.classList.add("hidden");
    });

    document.addEventListener("keydown", (event) => {
        if (event.key === "Escape")
            document.getElementById("overlay")?.classList.add("hidden");
    });
</script>
