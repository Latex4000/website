---
import { readdir } from "node:fs/promises";
import { desc, eq, getTableColumns } from "drizzle-orm";
import db from "../database/db";
import { Member, Sight } from "../database/schema";
import Layout from "../layouts/Layout.astro";
import { thingColourHandler } from "../server/thingUtils";

export const prerender = false;

if (!process.env.SIGHTS_UPLOAD_DIRECTORY) {
    return new Response("SIGHTS_UPLOAD_DIRECTORY not set", { status: 500 });
}

const sights = await db
    .select({
        ...getTableColumns(Sight),
        memberColor: Member.color,
    })
    .from(Sight)
    .innerJoin(Member, eq(Sight.memberDiscord, Member.discord))
    .where(eq(Sight.deleted, false))
    .orderBy(desc(Sight.id))
    .then(thingColourHandler);

const filenames = await readdir(process.env.SIGHTS_UPLOAD_DIRECTORY, {
    recursive: true,
});
const filenamesById: Record<number, string[]> = {};

for (const filename of filenames) {
    const parts = filename.split("/") as [number, string];

    if (parts.length === 2) {
        filenamesById[parts[0]] ??= [];
        filenamesById[parts[0]]!.push(parts[1]);
    }
}
---

<Layout
    header="Sights"
    title="Sights"
    description="Sights created by the Latex 4000 Collective"
>
    <p>Welcome to my web sight we got {sights.length} sights</p>
    {
        sights.length > 0 ? (
            <div class="sights-grid">
                {sights.map((sight) => (
                    <div class="sight">
                        <div
                            class={`sight__images sight__images--${Math.min(3, filenamesById[sight.id]?.length ?? 0)}`}
                        >
                            {filenamesById[sight.id]
                                ?.slice(0, 3)
                                .map((filename) => (
                                    <img
                                        alt=""
                                        class:list={[
                                            sight.pixelated && "pixelated",
                                        ]}
                                        src={`/sights-uploads/${sight.id}/${filename}`}
                                        title={sight.description}
                                    />
                                ))}
                        </div>
                        <h3>{sight.title}</h3>
                        <div
                            class="sight__date"
                            style={{
                                color: sight.memberColor,
                            }}
                        >
                            {sight.date.toLocaleString()}
                        </div>
                    </div>
                ))}
            </div>
        ) : (
            <p>No sights currently</p>
        )
    }
</Layout>

<style is:global>
    body:is(.themes-latex-light, .themes-latex-dark) .sights-grid {
        margin-top: 1rem;
    }
</style>

<style>
    .sights-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: 2lh 2ch;
    }

    @media (min-width: 600px) {
        .sights-grid {
            grid-template-columns: 1fr 1fr;
        }
    }

    .sight__images {
        aspect-ratio: 4 / 3;
        position: relative;
    }

    .sight__images img {
        aspect-ratio: 4 / 3;
        display: block;
        object-fit: cover;
        position: absolute;
        width: 100%;
    }

    .sight__images--1 img {
        object-fit: contain;
    }

    .sight__images--2 img {
        width: calc(100% - 2ch);
    }

    .sight__images--3 img {
        width: calc(100% - 4ch);
    }

    .sight__images img:nth-child(1) {
        top: 0;
        left: 0;
    }

    .sight__images img:nth-child(2) {
        top: calc(2ch * 3 / 4);
        left: 2ch;
    }

    .sight__images img:nth-child(3) {
        top: calc(4ch * 3 / 4);
        left: 4ch;
    }

    .sight h3 {
        margin: 1lh 0 0 0;
        text-align: center;
    }

    .sight__date {
        color: var(--text-color-alt);
        text-align: center;
    }

    .pixelated {
        image-rendering: pixelated;
    }
</style>
