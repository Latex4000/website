---
import { db } from "astro:db";
import Layout from "../../layouts/Layout.astro";
import { Word } from "astro:db";
import { eq } from "astro:db";
import { readFile } from "fs/promises";
import { Member } from "astro:db";
import { encodeSqlDate, wordFromDb, wordId } from "../../../db/config";
import { and } from "astro:db";
import { serverHTMLPurify } from "../../components/dompurifyserver";

export const prerender = false;

if (!process.env.WORDS_UPLOAD_DIRECTORY) {
    return new Response("WORDS_UPLOAD_DIRECTORY not set", { status: 500 });
}

const wordResult = await db
    .select({
        word: Word,
        memberColor: Member.color,
    })
    .from(Word)
    .innerJoin(Member, eq(Word.memberDiscord, Member.discord))
    .where(
        and(
            eq(
                Word.date,
                encodeSqlDate(
                    new Date(
                        Number.parseInt(Astro.params.timestamp!, 10) * 1000
                    )
                )
            ),
            eq(Word.deleted, false)
        )
    )
    .get();

if (wordResult == null) {
    return new Response(null, { status: 404 });
}

const word = wordFromDb(wordResult.word);
const memberColor = wordResult.memberColor;

const wordHtml = await readFile(
    `${process.env.WORDS_UPLOAD_DIRECTORY}/${wordId(word)}/words.html`,
    "utf8"
);

const purifiedHtml = serverHTMLPurify(wordHtml, ".word-markdown");
---

<Layout title={word.title}>
    <small>{word.date.toLocaleString()}</small>
    <div class="word-markdown" set:html={purifiedHtml} />
    <p style={{ color: memberColor }}>-L</p>
    <div class="tags">
        {word.tags.map((tag) => <small>{tag}</small>)}
    </div>
</Layout>

<script>
    import { getDataUrl } from "../../data/emoji";

    document.addEventListener("DOMContentLoaded", async () => {
        const imgSrcPairs: [HTMLImageElement, string][] = [];

        for (const img of document.querySelectorAll(
            ".word-markdown img.emoji"
            // eslint-disable-next-line no-undef
        ) as NodeListOf<HTMLImageElement>) {
            imgSrcPairs.push([img, await getDataUrl(img.title.slice(1, -1))]);
        }

        for (const [img, src] of imgSrcPairs) {
            img.src = src;
        }
    });
</script>

<style is:global>
    .word-markdown img {
        display: initial;
    }

    .word-markdown .emoji {
        object-fit: contain;
        width: 1lh;
        height: 1lh;
        vertical-align: bottom;
    }
</style>

<style is:inline>
    /* p {
        line-height: 1.5;
    } */
    .tags {
        display: flex;
        gap: var(--line-height);
        margin: var(--line-height) 0;
    }
</style>
