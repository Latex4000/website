---
import { db } from "astro:db";
import Layout from "../../layouts/Layout.astro";
import { Word } from "astro:db";
import { eq } from "astro:db";
import { readFile } from "fs/promises";
import { Member } from "astro:db";
import { encodeSqlDate, wordFromDb, wordId } from "../../../db/config";

export const prerender = false;

if (!process.env.WORDS_UPLOAD_DIRECTORY) {
    return new Response("WORDS_UPLOAD_DIRECTORY not set", { status: 500 });
}

const wordResult = await db
    .select({
        word: Word,
        memberColor: Member.color,
    })
    .from(Word)
    .innerJoin(Member, eq(Word.memberDiscord, Member.discord))
    .where(
        eq(
            Word.date,
            encodeSqlDate(
                new Date(Number.parseInt(Astro.params.timestamp!, 10) * 1000)
            )
        )
    )
    .get();

if (wordResult == null) {
    return new Response(null, { status: 404 });
}

const word = wordFromDb(wordResult.word);
const memberColor = wordResult.memberColor;

const wordHtml = await readFile(
    `${process.env.WORDS_UPLOAD_DIRECTORY}/${wordId(word)}/words.html`,
    "utf8"
);
---

<Layout title={word.title}>
    <small>{word.date.toLocaleString()}</small>
    <Fragment set:html={wordHtml} />
    <p style={{ color: memberColor }}>-L</p>
    <div class="tags">
        {word.tags.map((tag) => <small>{tag}</small>)}
    </div>
</Layout>

<style is:inline>
    p {
        line-height: 1.5;
    }
    .tags {
        display: flex;
        gap: var(--line-height);
        margin: var(--line-height) 0;
    }
</style>
